This module contains a class BaseGeometry (based on 6-base_geometry.py).

Importing module base_geometry


>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Now, doing tests

>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> 'area' in dir(BaseGeometry)
True

>>> 'integer_validator' in dir(BaseGeometry)
True

>>> dir(bg) == dir(BaseGeometry)
True

>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> bg.integer_validator("name", -7)
Traceback (most recent call last):
    ...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", "age")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age", 1)
nothing

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("age", -4)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("age", 4)
nothing

>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
    ...
TypeError: age must be an integer

>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
    ...
TypeError: age must be an integer

>>> bg.integer_validator("age", True)
nothing

>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
    ...
TypeError: age must be an integer

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
    ...
TypeError: age must be an integer
